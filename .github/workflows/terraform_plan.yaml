on:
    pull_request:

name: Terraform Plan

defaults:
    run:
        working-directory: ./terraform

permissions:
    id-token: write # This is required for aws oidc connection
    contents: read # This is required for actions/checkout
    pull-requests: write # This is required for posting comment to PR

env:
    TERRAFORM_VERSION: 1.6.6
    AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
    check_for_function_changes:
        uses: ./.github/workflows/get_directories_with_changes.yaml
        name: Get list of updated functions
        with:
            path: "./src/functions"

    zip_functions:
        uses: ./.github/workflows/zip_function.yaml
        name: Zip updated functions
        if: ${{ needs.check_for_function_changes.outputs.changed_directories != '' }}
        strategy:
            matrix: ${{fromJson(needs.check_for_function_changes.outputs.changed_directories)}}
        needs:
            - check_for_function_changes
        with:
            function_dir: ${{ matrix.dir }}

    terraform_plan:
        runs-on: ubuntu-22.04
        name: Terraform Plan
        needs:
            - check_for_function_changes
            - zip_functions
        if: ${{ always() && !cancelled() && needs.check_for_function_changes.result == 'success' }}
        strategy:
            matrix:
                stage: ["dev"]
        env:
            stage: ${{ matrix.stage }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - uses: actions/download-artifact@v4
              with:
                  path: ./src/functions/dist
                  merge-multiple: true

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ secrets.AWS_OIDC_ROLE_DEV }}
                  aws-region: "eu-west-2"
                  role-session-name: GitHub-OIDC-TERRAFORM

            - uses: actions/cache@v4
              name: Cache plugin dir
              with:
                  path: ~/.tflint.d/plugins
                  key: ${{ matrix.stage }}-tflint-${{ hashFiles('terraform/.tflint.hcl') }}

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: ${{ env.TERRAFORM_VERSION }}

            - name: Terraform fmt
              id: fmt
              run: terraform fmt -check
              continue-on-error: true

            - name: Setup TFLint
              uses: terraform-linters/setup-tflint@v4
              with:
                  tflint_wrapper: true

            - name: Init TFLint
              run: tflint --init
              env:
                  # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
                  GITHUB_TOKEN: ${{ github.token }}

            - name: Run TFLint
              id: tflint
              run: tflint --recursive --config "$(pwd)/.tflint.hcl" -f compact --minimum-failure-severity=warning
              continue-on-error: true

            - name: Terraform Init
              id: init
              run: terraform -chdir=$stage init

            - name: Terraform Validate
              id: validate
              run: terraform -chdir=$stage validate -no-color

            - name: Terraform Plan
              id: plan
              run: terraform -chdir=$stage plan -input=false -no-color
              continue-on-error: true

            - name: Add plan to PR comment
              uses: actions/github-script@v7
              env:
                  PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      // 1. Retrieve existing bot comments for the PR
                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      })
                      const botComment = comments.find(comment => {
                        return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                      })

                      // 2. Prepare format of the comment
                      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                      #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                      <details><summary>Validation Output</summary>

                      \`\`\`\n
                      ${{ steps.validate.outputs.stdout }}
                      \`\`\`

                      </details>

                      #### TFLint üñå\`${{ steps.tflint.outcome }}\`

                      <details><summary>TFLint Output</summary>

                      \`\`\`\n
                      ${{ steps.tflint.outputs.stdout }}
                      \`\`\`

                      </details>

                      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                      <details><summary>Show Plan</summary>

                      \`\`\`\n
                      ${process.env.PLAN}
                      \`\`\`

                      </details>

                      *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

                      // 3. If we have a comment, update it, otherwise create a new one
                      if (botComment) {
                        github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: output
                        })
                      } else {
                        github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: output
                        })
                      }
