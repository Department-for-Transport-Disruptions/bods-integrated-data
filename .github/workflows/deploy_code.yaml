# When a manual deployment occurs, deploy_all_functions is set to true and the get_functions_and_tasks job creates a list of all functions to zip and deploy.
# Otherwise, the deploy_all_functions is set to false and the check_for_function_changes job creates a list of changed functions to zip and deploy.

name: Deploy code (called workflow)
run-name: Deploy (${{ inputs.stage }})

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
      deploy_all_functions:
        required: true
        type: boolean

permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout

env:
  TERRAFORM_VERSION: 1.6.6

jobs:
  get_functions_and_tasks:
    runs-on: ubuntu-24.04
    name: Get functions and tasks
    outputs:
      all_functions: ${{ steps.get_list_of_functions.outputs.all_functions }}
      all_ecs_tasks: ${{ steps.get_list_of_ecs_tasks.outputs.all_ecs_tasks }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get list of functions
        id: get_list_of_functions
        run: echo "all_functions=$(cd ./src/functions && ls -d */ | sed 's#/##' | jq -R | jq -sc)" >> "$GITHUB_OUTPUT"

      - name: Get list of ECS tasks
        id: get_list_of_ecs_tasks
        run: echo "all_ecs_tasks=$(cd ./src/tasks && ls -d */ | sed 's#/##' | jq -R | jq -sc)" >> "$GITHUB_OUTPUT"

  check_for_function_changes:
    uses: ./.github/workflows/get_directories_with_changes.yaml
    name: Get list of updated functions
    with:
      path: "./src/functions"
      shared_code_path: "./src/shared"

  zip_functions:
    uses: ./.github/workflows/zip_function.yaml
    name: Zip functions
    if: ${{ inputs.deploy_all_functions || needs.check_for_function_changes.outputs.changed_directories }}
    strategy:
      matrix:
        dir: ${{ fromJSON(inputs.deploy_all_functions && needs.get_functions_and_tasks.outputs.all_functions || needs.check_for_function_changes.outputs.changed_directories) }}
    needs:
      - get_functions_and_tasks
      - check_for_function_changes
    with:
      function_dir: ${{ matrix.dir }}

  deploy_functions_and_infrastructure:
    runs-on: ubuntu-24.04
    name: Deploy functions and infrastructure
    if: ${{ always() && !cancelled() && needs.check_for_function_changes.result == 'success' }}
    env:
      STAGE: ${{ inputs.stage }}
    environment: ${{ inputs.stage }}
    needs:
      - get_functions_and_tasks
      - check_for_function_changes
      - zip_functions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download zipped functions
        uses: actions/download-artifact@v4
        with:
          path: ./src/functions/dist
          merge-multiple: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform init
        run: terraform -chdir=terraform/${{ inputs.stage }} init

      - name: Terraform plan
        run: terraform -chdir=terraform/${{ inputs.stage }} plan -lock-timeout=5m -input=false -no-color -out .planfile

      - name: Terraform apply
        run: terraform -chdir=terraform/${{ inputs.stage }} apply -lock-timeout=5m -input=false -no-color .planfile

      - name: Run database migrations
        run: |
          aws lambda invoke --function-name integrated-data-db-migrator-migrate-${{ inputs.stage }} --cli-binary-format raw-in-base64-out response.json

  deploy_ecs_tasks:
    uses: ./.github/workflows/deploy_ecs_task.yaml
    name: Deploy ECS tasks
    if: ${{ always() && !cancelled() && needs.check_for_function_changes.result == 'success' }}
    strategy:
      matrix:
        dir: ${{ fromJSON(needs.get_functions_and_tasks.outputs.all_ecs_tasks) }}
    needs:
      - get_functions_and_tasks
      - deploy_functions_and_infrastructure
    with:
      stage: ${{ inputs.stage }}
      task_name: ${{ matrix.dir }}
    secrets: inherit
