{
  "Comment": "Import reference data and generate GTFS timetables",
  "StartAt": "DB Cleardown",
  "States": {
    "DB Cleardown": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${db_cleardown_function_arn}:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Retrieve and Process Reference Data"
    },
    "Retrieve and Process Reference Data": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Retrieve NOC Data",
          "States": {
            "Retrieve NOC Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${noc_retriever_function_arn}:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Process NOC Data"
            },
            "Process NOC Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${noc_processor_function_arn}:$LATEST",
                "Payload": {
                  "Records": [
                    {
                      "s3": {
                        "object": {
                          "key": "noc.xml"
                        },
                        "bucket": {
                          "name": "${noc_bucket_name}"
                        }
                      }
                    }
                  ]
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Retrieve NaPTAN Data",
          "States": {
            "Retrieve NaPTAN Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${naptan_retriever_function_arn}:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Process NaPTAN Data"
            },
            "Process NaPTAN Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${naptan_uploader_function_arn}:$LATEST",
                "Payload": {
                  "Records": [
                    {
                      "s3": {
                        "object": {
                          "key": "Stops.csv"
                        },
                        "bucket": {
                          "name": "${naptan_bucket_name}"
                        }
                      }
                    }
                  ]
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Retrieve NPTG Data",
          "States": {
            "Retrieve NPTG Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${nptg_retriever_function_arn}:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Process NPTG Data"
            },
            "Process NPTG Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${nptg_uploader_function_arn}:$LATEST",
                "Payload": {
                  "Records": [
                    {
                      "s3": {
                        "object": {
                          "key": "NPTG.xml"
                        },
                        "bucket": {
                          "name": "${nptg_bucket_name}"
                        }
                      }
                    }
                  ]
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Retrieve Bank Holidays Data",
          "States": {
            "Retrieve Bank Holidays Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${bank_holidays_retriever_function_arn}:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      ],
      "Next": "Retrieve BODS TXC Data"
    },
    "Retrieve BODS TXC Data": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${bods_txc_retriever_function_arn}:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "OutputPath": "$.Payload",
      "Next": "Get Zipped BODS TXC Keys"
    },
    "Get Zipped BODS TXC Keys": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Unzip BODS TXC Data",
        "States": {
          "Unzip BODS TXC Data": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${unzipper_function_arn}:$LATEST",
              "Payload": {
                "Records": [
                  {
                    "s3": {
                      "bucket": {
                        "name": "${bods_txc_zipped_bucket_name}"
                      },
                      "object": {
                        "key.$": "$.Key"
                      }
                    }
                  }
                ]
              }
            },
            "End": true,
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 1,
                "MaxAttempts": 3
              }
            ]
          }
        }
      },
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:listObjectsV2",
        "Parameters": {
          "Bucket.$": "$.bodsTxcZippedBucketName",
          "Prefix.$": "$.prefix"
        }
      },
      "ResultPath": null,
      "Next": "Get BODS TXC Object Keys"
    },
    "Get BODS TXC Object Keys": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Process BODS TXC",
        "States": {
          "Process BODS TXC": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${txc_processor_function_arn}:$LATEST",
              "Payload": {
                "Records": [
                  {
                    "s3": {
                      "bucket": {
                        "name": "${bods_txc_bucket_name}"
                      },
                      "object": {
                        "key.$": "$.Key"
                      }
                    }
                  }
                ]
              }
            },
            "End": true
          }
        }
      },
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:listObjectsV2",
        "Parameters": {
          "Bucket": "${bods_txc_bucket_name}",
          "Prefix.$": "$.prefix"
        }
      },
      "MaxConcurrency": 50,
      "ToleratedFailureCount": 1000,
      "Next": "Retrieve TNDS TXC Data",
      "ResultPath": null
    },
    "Retrieve TNDS TXC Data": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${tnds_txc_retriever_function_arn}:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Get Zipped TNDS TXC Keys",
      "OutputPath": "$.Payload"
    },
    "Get Zipped TNDS TXC Keys": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Unzip TNDS TXC Data",
        "States": {
          "Unzip TNDS TXC Data": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${unzipper_function_arn}:$LATEST",
              "Payload": {
                "Records": [
                  {
                    "s3": {
                      "bucket": {
                        "name": "${tnds_txc_zipped_bucket_name}"
                      },
                      "object": {
                        "key.$": "$.Key"
                      }
                    }
                  }
                ]
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:listObjectsV2",
        "Parameters": {
          "Bucket.$": "$.tndsTxcZippedBucketName",
          "Prefix.$": "$.prefix"
        }
      },
      "ResultPath": null,
      "Next": "Get TNDS TXC Object Keys"
    },
    "Get TNDS TXC Object Keys": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Process TNDS TXC",
        "States": {
          "Process TNDS TXC": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${txc_processor_function_arn}:$LATEST",
              "Payload": {
                "Records": [
                  {
                    "s3": {
                      "bucket": {
                        "name": "${tnds_txc_bucket_name}"
                      },
                      "object": {
                        "key.$": "$.Key"
                      }
                    }
                  }
                ]
              }
            },
            "End": true
          }
        }
      },
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:listObjectsV2",
        "Parameters": {
          "Bucket": "${tnds_txc_bucket_name}",
          "Prefix.$": "$.prefix"
        }
      },
      "MaxConcurrency": 50,
      "ToleratedFailureCount": 5000,
      "ResultPath": null,
      "Next": "Run Table Renamer"
    },
    "Run Table Renamer": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${table_renamer_function_arn}:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Generate GTFS Timetables"
    },
    "Generate GTFS Timetables": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${gtfs_timetables_generator_function_arn}:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "End": true
    }
  }
}
